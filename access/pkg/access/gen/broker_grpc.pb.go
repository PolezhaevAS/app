// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package access

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessBrokerClient is the client API for AccessBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessBrokerClient interface {
	UserAccess(ctx context.Context, in *UserAccessRequest, opts ...grpc.CallOption) (*UserAccessResponse, error)
}

type accessBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessBrokerClient(cc grpc.ClientConnInterface) AccessBrokerClient {
	return &accessBrokerClient{cc}
}

func (c *accessBrokerClient) UserAccess(ctx context.Context, in *UserAccessRequest, opts ...grpc.CallOption) (*UserAccessResponse, error) {
	out := new(UserAccessResponse)
	err := c.cc.Invoke(ctx, "/broker.access.AccessBroker/UserAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessBrokerServer is the server API for AccessBroker service.
// All implementations must embed UnimplementedAccessBrokerServer
// for forward compatibility
type AccessBrokerServer interface {
	UserAccess(context.Context, *UserAccessRequest) (*UserAccessResponse, error)
	mustEmbedUnimplementedAccessBrokerServer()
}

// UnimplementedAccessBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedAccessBrokerServer struct {
}

func (UnimplementedAccessBrokerServer) UserAccess(context.Context, *UserAccessRequest) (*UserAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAccess not implemented")
}
func (UnimplementedAccessBrokerServer) mustEmbedUnimplementedAccessBrokerServer() {}

// UnsafeAccessBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessBrokerServer will
// result in compilation errors.
type UnsafeAccessBrokerServer interface {
	mustEmbedUnimplementedAccessBrokerServer()
}

func RegisterAccessBrokerServer(s grpc.ServiceRegistrar, srv AccessBrokerServer) {
	s.RegisterService(&AccessBroker_ServiceDesc, srv)
}

func _AccessBroker_UserAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessBrokerServer).UserAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.access.AccessBroker/UserAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessBrokerServer).UserAccess(ctx, req.(*UserAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessBroker_ServiceDesc is the grpc.ServiceDesc for AccessBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.access.AccessBroker",
	HandlerType: (*AccessBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAccess",
			Handler:    _AccessBroker_UserAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}
